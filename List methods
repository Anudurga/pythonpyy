# List Methods Demonstration

# pop()
l = [1, 2, 3, 4, 5]
a = l.pop(2)
print("After pop(2):", l)        # Removes element at index 2 (value 3)
print("Popped element:", a)      # Output: 3

# append()
l.append(11)
print("After append(11):", l)    # Adds 11 to the end of the list

# extend()
l1 = [6, 7, 8, 9]
l.extend(l1)
print("After extend([6,7,8,9]):", l)  # Adds elements of l1 individually

# append a list (nested)
l.append(l1)
print("After append(l1):", l)    # Adds l1 as a single element (nested list)

# slicing
x = l[3:6]
print("Sliced elements (l[3:6]):", x) # Gets elements from index 3 to 5
a = l[9][0]
print("Accessing nested list first element:", a) # Accesses 1st element of nested list
b = l[0]
print("First element of list:", b)

# count(), index(), copy()
e = [1, 2, 4, 4, 6, 8, 4]
c = e.count(4)
d = e.index(1)
print("Count of 4:", c)
print("Index of 1:", d)
p = e.copy()
print("Copied list:", p)

# sort(), reverse()
e.sort()
print("Sorted list:", e)
e.reverse()
print("Reversed list:", e)

# clear()
e.clear()
print("After clear():", e)

# list() with range()
g = list(range(10))
print("List from range(10):", g)

# insert(), remove()
g.insert(1, 1)
print("After insert(1,1):", g)
g.remove(2)
print("After remove(2):", g)

# for loop - printing elements
print("Printing elements using for loop:")
for x in g:
    print(x)

# for loop with index
l = [1, 2, 3, 4, 5]
print("Printing indices using range(len(l)):")
for x in range(len(l)):
    print(x)

# Dunder (double underscore) variables
__module__ = __name__
print("Module name:", __module__)

# enumerate (not used directly here, but demonstrating main package)
__main__package__ = __name__
print("Main package name:", __main__package__)




**Output**

After pop(2): [1, 2, 4, 5]
Popped element: 3
After append(11): [1, 2, 4, 5, 11]
After extend([6,7,8,9]): [1, 2, 4, 5, 11, 6, 7, 8, 9]
After append(l1): [1, 2, 4, 5, 11, 6, 7, 8, 9, [6, 7, 8, 9]]
Sliced elements (l[3:6]): [5, 11, 6]
Accessing nested list first element: 6
First element of list: 1
Count of 4: 3
Index of 1: 0
Copied list: [1, 2, 4, 4, 6, 8, 4]
Sorted list: [1, 2, 4, 4, 4, 6, 8]
Reversed list: [8, 6, 4, 4, 4, 2, 1]
After clear(): []
List from range(10): [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
After insert(1,1): [0, 1, 1, 2, 3, 4, 5, 6, 7, 8, 9]
After remove(2): [0, 1, 1, 3, 4, 5, 6, 7, 8, 9]
Printing elements using for loop:
0
1
1
3
4
5
6
7
8
9
Printing indices using range(len(l)):
0
1
2
3
4
Module name: __main__
Main package name: __main__


### ðŸ’¡ **Explanation (Detailed and Simple)**

This Python program demonstrates various list operations.
It begins with a list `[1,2,3,4,5]`, removes the third element using `pop(2)` (result `[1,2,4,5]`), and prints the popped element `3`. Then `append(11)` adds a new element to the end, resulting in `[1,2,4,5,11]`. The `extend([6,7,8,9])` method adds multiple elements individually, while `append(l1)` adds `[6,7,8,9]` as a nested list. Slicing `l[3:6]` extracts a sublist `[5,11,6]`, and nested indexing `l[9][0]` retrieves `6`. The program counts how many times `4` appears (3 times), finds the index of `1`, makes a copy, sorts it ascending, reverses it, and finally clears it to an empty list. The `range(10)` creates `[0â€“9]`, `insert(1,1)` adds another `1` at index `1`, and `remove(2)` deletes the first `2`. Two for loops print all list elements and their indices. Finally, it shows that both `__module__` and `__main__package__` are `"__main__"`, meaning the script is being executed directly (not imported as a module).
