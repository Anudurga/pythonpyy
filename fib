# Fibonacci series using a for loop

# Take input from the user for the number of terms
x = int(input("Enter the number of terms: "))

# Initialize the first two Fibonacci numbers
a, b = 0, 1

# Loop to generate the Fibonacci series up to x terms
for i in range(1, x + 1):
    print(a, end=" ")  # Print the current Fibonacci number
    c = a + b          # Calculate the next Fibonacci number
    a = b              # Update a to the previous b
    b = c              # Update b to the newly calculated Fibonacci number
Input:
Enter the number of terms: 7
Output:
0 1 1 2 3 5 8 




# Fibonacci Series up to a given number using while loop
# Ask the user to input a number
x = int(input("Enter the value of x: "))

# Initialize the first two Fibonacci numbers
a = 0
b = 1

# Generate and print Fibonacci numbers until 'a' exceeds x
while a <= x:
    print(a, end=" ")  # Print current Fibonacci number
    c = a + b          # Compute the next Fibonacci number
    a = b              # Shift 'a' to next number
    b = c              # Shift 'b' to next number
Input:
Enter the value of x: 10
Output:
0 1 1 2 3 5 8




# Fibonacci Characters Program
# This program prints letters of the alphabet according to Fibonacci sequence positions.

# Take input from the user
x = int(input("Enter the limit (x): "))

# Initialize the first two Fibonacci numbers
a = 0
b = 1

# Generate Fibonacci sequence and print corresponding characters
for i in range(1, x):
    print(chr(97 + a), end=" ")  # chr(97) = 'a', 97 + a gives the alphabet
    if a > x:  # Stop if the Fibonacci number exceeds x
        break
    c = a + b  # Next Fibonacci number
    a = b
    b = c
Input:
Enter the limit (x): 10
Output:
a b b c d f i




# Program to print letters corresponding to Fibonacci numbers using a while loop

# Initialize first two Fibonacci numbers
a = 0
b = 1

# Loop until the Fibonacci number reaches 26 (number of letters in the alphabet)
while a < 26:
    # Print the character corresponding to the current Fibonacci number
    # chr(97 + a) converts 0 -> 'a', 1 -> 'b', 2 -> 'c', etc.
    print(chr(97 + a), end=" ")
    
    # Update Fibonacci numbers
    c = a + b
    a = b
    b = c
Output:
a b c f k u 




# Program: Alternative Fibonacci Series in a Given Range
# Input: Two integers x and y representing the range of Fibonacci terms to consider.
# Output: Fibonacci numbers printed alternatively (i.e., every second Fibonacci number) within the given range.
# Initialize the first two Fibonacci numbers and a counter
a = 0
b = 1
count = 0

# Taking input from the user for the range
x = int(input("Enter the starting range (x): "))
y = int(input("Enter the ending range (y): "))

# Generate Fibonacci numbers and print every alternate term in the given range
for i in range(x, y + 1):
    if count % 2 == 0:
        print(a, end=" ")
    c = a + b
    a = b
    b = c
    count += 1


Input:
Enter the starting range (x): 1
Enter the ending range (y): 10

Output:
0 1 3 8 21




# Program: Fibonacci Series at Prime Indices
# Description: This program prints Fibonacci numbers whose positions (indices) are prime numbers.

# Function to check whether a number is prime
def is_prime(n):
    for i in range(2, n):
        if n % i == 0:
            return False
    return True

# Taking range input from the user
g = int(input("enter g"))
h = int(input("enter h"))

# Initial Fibonacci numbers
a = 0
b = 1

# Generate Fibonacci series and print numbers at prime indices
for i in range(g, h + 1):
    if is_prime(i):
        print(a, end=" ")
    c = a + b
    a = b
    b = c

enter g: 1  
enter h: 10


Output:
0 1 3 13




# Program to find the nth Fibonacci number using recursion

def fibonacci(n, a=0, b=1):
    # Base case: if n == 0, return a (the first Fibonacci number)
    if n == 0:
        return a
    # Base case: if n == 1, return b (the second Fibonacci number)
    elif n == 1:
        return b
    else:
        # Recursive case: calculate the next Fibonacci number
        c = a + b
        # Move one step forward (n decreases by 1)
        return fibonacci(n - 1, b, c)

# Call the function with n = 6
print(fibonacci(n=6))  # Output: 8





# Program to find the nth Fibonacci number using simple recursion

def fibonacci(n):
    # Base case: if n is 0 or 1, return n directly
    if n <= 1:
        return n
    else:
        # Recursive case: sum of the previous two Fibonacci numbers
        return fibonacci(n - 1) + fibonacci(n - 2)

# Take input from the user
num = int(input("Enter a number: "))

# Display the result
print("Fibonacci number at position", num, "is:", fibonacci(num))


Sample Output
Enter a number: 6
Fibonacci number at position 6 is: 8
